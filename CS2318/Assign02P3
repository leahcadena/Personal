###############################################################################
# Title: Assign02P3 Author: Leah Cadena
# Class: CS 2318-003, Fall 2023 Submitted: 11/21/23
###############################################################################
# Program: MIPS tranlation of a given C++ program
###############################################################################
# Pseudocode description: supplied a2p2_SampSoln.cpp
###############################################################################
#include <iostream>
#using namespace std;
#int a1[12],
# a2[12],
# a3[12];
#char einStr[] = "Enter integer #";
#char moStr[] = "Max of ";
#char ieStr[] = " ints entered...";
#char emiStr[] = "Enter more ints? (n or N = no, others = yes) ";
#char begA1Str[] = "beginning a1: ";
#char nn09A1Str[] = "a1 (noneg09): ";
#char procA1Str[] = "processed a1: ";
#char procA2Str[] = " a2: ";
#char procA3Str[] = " a3: ";
#char dacStr[] = "Do another case? (n or N = no, others = yes) ";
#char dlStr[] = "================================";
#char byeStr[] = "bye...";
.data
a1: .space 48
a2: .space 48
a3: .space 48
einStr: .asciiz "Enter integer #"
moStr: .asciiz "Max of "
ieStr: .asciiz ints entered...
emiStr: .asciiz "Enter more ints? (n or N = no, others = yes) "
begA1Str: .asciiz "Beginning a1: "
nn09A1Str: .asciiz "a1 (noneg09): "
procA1Str: .asciiz "processed a1: "
procA2Str: .asciiz " a2: "
procA3Str: .asciiz " a3: "
dacStr: .asciiz "Do another case? (n or N = no, others = yes) "
dlStr: .asciiz "================================"
byeStr: .asciiz "bye..."
#int main()
#{
.text
.globl main
main:
########################################
# Register Usage
########################################
# $a0: short-lived holder (to locally comment)
# $a1: endPtr1
# $a2: endPtr2
# $a3: endPtr3
# $t0: target
# $t1: used1
# $t2: used2
# $t3: used3
# $t4: hopPtr1
# $t5: hopPtr2
# $t6: hopPtrX
# $t7: hopPtr3
# $t8: oneChar or oneInt or iter (non-overlappingly)
# $t9: count
# $v0: short-lived holder (to locally comment)
# $v1: short-lived holder (to locally comment)
################################################
#oneChar = 'y';
li $t8, 'y'
#goto WTest1;
j WTest1
begW1:
#used1 = 0;
li $t1,0
#hopPtr1 = a1;
la $t4, a1
#goto WTest2;
j WTest2
begW2:
#cout << einStr;
li $v0, 4
la $a0, einStr
syscall
#cout << (used1 + 1);
li $v0, 1
addi $a0, $t1, 1
syscall
#cout << ':' << ' ';
li $a0, ':'
li $v0, 11
syscall
li $a0, ' '
syscall
#cin >> *hopPtr1;
li $v0, 5
syscall
sw $v0, 0($t4)
#++used1;
addi $t1, $t1, 1
#++hopPtr1;
addi $t4, $t4, 4
#if (used1 >= 12) goto elseI1;
li $v0,12
bge $t1,$v0,elseI1
begI1:
#cout << emiStr;
li $v0, 4
la $a0, emiStr
syscall# $t0: target
# $t1: used1
# $t2: used2
# $t3: used3
# $t4: hopPtr1
# $t5: hopPtr2
# $t6: hopPtrX
# $t7: hopPtr3
# $t8: oneChar or oneInt or iter (non-overlappingly)
# $t9: count
# $v0: short-lived holder (to locally comment)
# $v1: short-lived holder (to locally comment)
################################################
#oneChar = 'y';
li $t8, 'y'
#goto WTest1;
j WTest1
begW1:
#used1 = 0;
li $t1,0
#hopPtr1 = a1;
la $t4, a1
#goto WTest2;
j WTest2
begW2:
#cout << einStr;
li $v0, 4
la $a0, einStr
syscall
#cout << (used1 + 1);
li $v0, 1
addi $a0, $t1, 1
syscall
#cout << ':' << ' ';
li $a0, ':'
li $v0, 11
syscall
li $a0, ' '
syscall
#cin >> *hopPtr1;
li $v0, 5
syscall
sw $v0, 0($t4)
#++used1;
addi $t1, $t1, 1
#++hopPtr1;
addi $t4, $t4, 4
#if (used1 >= 12) goto elseI1;
li $v0,12
bge $t1,$v0,elseI1
begI1:
#cout << emiStr;
li $v0, 4
la $a0, emiStr
syscall
#cin >> oneChar;
li $v0, 12
syscall
move $t8, $v0
li $a0, ' '
li $v0, 11
syscall
li $a0, '\n'
li $v0, 11
syscall
#goto endI1;
j endI1
elseI1:
#cout << moStr << 12 << ieStr << endl;
li $v0, 4
la $a0, moStr
syscall
li $v0, 1
move $a0, $v1
syscall
li $v0, 4
la $a0, ieStr
syscall
li $a0, '\n'
li $v0, 11
syscall
#oneChar = 'n';
li $t8, 'n'
endI1:#
endW2:#
WTest2:
#if (oneChar == 'n') goto xitW2;
li $v0,'n'
beq $t8,$v0,xitW2
#if (oneChar != 'N') goto begW2;
li $v0,'N'
bne $t8,$v0,begW2
xitW2:
#cout << endl;
li $a0, '\n'
li $v0, 11
syscall
#cout << begA1Str;
li $v0, 4
la $a0, begA1Str
syscall
#if (used1 <= 0) goto endI2;
ble $t1, $zero, endI2
begI2:
#hopPtr1 = a1;
la $t4, a1
#endPtr1 = a1 + used1;
la $a0, a1
sll $a1, $t1, 2
add $a1, $a1, $a0
begDW1:
#cout << *hopPtr1 << ' ' << ' ';
li $v0, 1
lw $a0, 0($t4)
syscall
li $v0, 11
li $a0, ' '
syscall
syscall
#++hopPtr1;
addi $t4, $t4, 4
endDW1:
DWTest1: #if (hopPtr1 < endPtr1) goto begDW1;
blt $t4, $a1, begDW1
endI2:
#cout << endl;
li $v0, 11
li $a0, '\n'
syscall
#if (used1 <= 0) goto endI3;
blez $t1,endI3
begI3:
#endPtr1 = a1 + used1;
la $a1, a1
sll $a0, $t1, 2
add $a1, $a1, $a0
#hopPtr1 = a1;
la $t4,a1
#goto FTest1;
j FTest1
begF1:
#target = *hopPtr1;
lw $t0, 0($t4)
#if (target >= 0 && target <= 9) goto endI4;
sge $v0,$t0,$zero
li $a0,9
sle $v1,$t0,$a0
beq $v1,$v0,endI4
begI4:
#hopPtrX = hopPtr1 + 1;
addi $t6, $t4, 4
#goto FTest2;
j FTest2
begF2:
#*(hopPtrX - 1) = *hopPtrX;
lw $v0, 0($t6)
sw $v0, -4($t6)
#++hopPtrX;
addi $t6, $t6, 4
endF2:
FTest2: #if (hopPtrX < endPtr1) goto begF2;
blt $t6,$a1,begF2
#--used1;
addi $t1, $t1, -1
#--endPtr1;
addi $a1, $a1, -4
#--hopPtr1;
addi $t4, $t4, -4
endI4:
#+++hopPtr1;
addi $t4, $t4, 4
endF1:
FTest1: #if (hopPtr1 < endPtr1) goto begF1;
blt $t4,$a1,begF1
#cout << nn09A1Str;
li $v0, 4
la $a0, nn09A1Str
syscall
#if (used1 <= 0) goto endI5;
blez $t1,endI5
begI5:
#hopPtr1 = a1;
la $t4,a1
#endPtr1 = a1 + used1;
la $a1, a1
sll $a0, $t1, 2
add $a1, $a1, $a0
begDW2:
#cout << *hopPtr1 << ' ' << ' ';
li $v0, 1
lw $a0, 0($t4)
syscall
li $v0, 11
li $a0, ' '
syscall
syscall
#++hopPtr1;
addi $t4, $t4, 4
endDW2:
DWTest2: #if (hopPtr1 < endPtr1) goto begDW2;
blt $t4,$a1,begDW2
endI5:
#cout << endl;
li $v0, 11
li $a0, '\n'
syscall
#used2 = 0;
li $t2, 0
#used3 = 0;
li $t3, 0
#hopPtr1 = a1;
la $t4,a1
#hopPtr2 = a2;
la $t5,a2
#hopPtr3 = a3;
la $t7,a3
#endPtr1 = a1 + used1;
la $a1, a1
sll $a0, $t1, 2
add $a1, $a1, $a0
#goto WTest3;
j WTest3
begW3:
#oneInt = *hopPtr1;
lw $t8, 0($t4)
#*hopPtr2 = oneInt;
sw $t8, 0($t5)
#used2;
addi $t2, $t2, 1
#++hopPtr2;
addi $t5, $t5, 4
#*hopPtr3 = oneInt;
sw $t8, 0($t7)
#++used3;
addi $t3, $t3, 1
#++hopPtr3;
addi $t7, $t7, 4
#++hopPtr1;
addi $t4, $t4, 4
endW3:
WTest3: #if (hopPtr1 < endPtr1) goto begW3;
blt $t4,$a1,begW3
#iter = 0;
li $t8, 0
begDW3:
#++iter;
addi $t8,$t8,1
#count = 0;
li $t9, 0
#if (iter != 1) goto elseI6;
li $v0,1
bne $t8,$v0,elseI6
begI6:
#endPtr1 = a1 + used1;
la $a1, a1
sll $a0, $t1, 2
add $a1, $a1, $a0
#hopPtr1 = a1;
la $t4,a1
#goto FTest3;
j FTest3
begF3:
#target = *hopPtr1;
lw $t0, 0($t4)
#if (target == 5) goto elseI7;
li $v0,5
beq $t0, $v0, elseI7
begI7:
#++count;
addi $t9, $t9, 1
#goto endI7;
j endI7
elseI7:
#if (count == 0) goto endI8;
beq $t9,$zero,endI8
begI8:
#(*hopPtr1 - count) = *hopPtr1;
lw $v0,0($t4)
sll $v1,$t9,2
sub $v1,$t4,$v1
sw $v0,0($v1)
endI8:
endI7:
#++hopPtr1;
addi $t4, $t4, 4
endF3:
FTest3:# if(hopPtr1 < endPtr1) goto begF3;
blt $t4,$a1,begF3
#used1 -= count;
sub $t1, $t1, $t9
#if (used1 != 0) goto endI9;
bne $t1,$zero, endI9
begI9:
#hopPtr1 = a1;
la $a1,a1
#*hopPtr1 = -101;
li $v0,-101
sw $v0, 0($a1)
#++used1;
addi $t1, $t1, 1
endI9:
#goto endI6;
j endI6
elseI6:
#if (iter != 2) goto elseI10;
li $v0,2
bne $t8,$v0,elseI10
begI10:
# endPtr2 = a2 + used2;
la $a2, a2
sll $a0, $t2, 2
add $a2, $a2, $a0
#hopPtr2 = a2;
la $t5,a2
#goto FTest4;
j FTest4
begF4:
#target = *hopPtr2;
lw $t0, 0($t5)
#if (target <= 4) goto elseI11;
li $v0,4
ble $t0,$v0,elseI11
begI11:
#++count;
addi $t9,$t9,1
#goto endI11;
j endI11
elseI11:
#if (count == 0) goto endI12;
beq $t9,$zero,endI12
begI12:
#*(hopPtr2 - count) = *hopPtr2;
lw $v0,0($t5)
sll $v1,$t9,2
sub $v1,$t5,$v1
sw $v0,0($v1)
endI12:
endI11:
#++hopPtr2;
addi $t5,$t5,4
FTest4:# if (hopPtr2 < endPtr2) goto begF4
blt $t5,$a2,begF4
#used2 -= count;
sub $t2, $t2, $t9
#if (used2 != 0) goto endI13;
bne $t2,$zero,endI13
begI13:
#hopPtr2 = a2;
la $a2,a2
#*hopPtr2 = -101;
li $v0,-101
sw $v0, 0($a2)
#++used2;
addi $t2,$t2,1
endI13:
#goto endI10;
j endI10
elseI10:
#endPtr3 = a3 + used3;
la $a3, a3
sll $a0, $t3, 2
add $a3, $a3, $a0
#hopPtr3 = a3;
la $t7, a3
#goto FTest5;
j FTest5
begF5:
#target = *hopPtr3;
lw $t0, 0($t7)
#if (target >= 6) goto elseI14;
li $v0,6
bge $t0,$v0,elseI14
begI14:
#++count;
addi $t9,$t9,1
#goto endI14;
j endI14
elseI14:
#if (count == 0) goto endI15;
beq $t9,$zero,endI15
begI15:
#(*hopPtr3 - count) = *hopPtr3;
lw $v0,0($t7)
sll $v1,$t9,2
sub $v1,$t7,$v1
sw $v0,0($v1)
endI15:
endI14:
#++hopPtr3;
addi $t7,$t7,4
endF5:
FTest5:# if (hopPtr3 < endPtr3) goto begF5;
blt $t7,$a3,begF5
#used3 -= count;
sub $t3, $t3, $t9
#if (used3 != 0) goto endI16;
bne $t3, $zero,endI16
begI16:
#hopPtr3 = a3;
la $a3, a3
#*hopPtr3 = -101;
li $v0,-101
sw $v0, 0($a3)
#++used3;
addi $t3, $t3, 1
endI16:
endI10:
endI6:
endDW3:
DWTest3:# if (iter < 3) goto begDW3;
li $v0, 3
blt $t8,$v0,begDW3
endI3:
#cout << procA1Str;
li $v0, 4
la $a0, procA1Str
syscall
#if (used1 <= 0) goto endI17;
ble $t1,$zero,endI17
begI17:
#hopPtr1 = a1;
la $t4, a1
#endPtr1 = a1 + used1;
la $a1, a1
sll $a0, $t1, 2
add $a1, $a1, $a0
begDW4:
#cout << *hopPtr1 << ' ' << ' ';
li $v0, 1
lw $a0, 0($t4)
syscall
li $v0, 11
li $a0, ' '
syscall
syscall
#++hopPtr1;
addi $t4, $t4, 4
endDW4:
DWTest4:# if (hopPtr1 < endPtr1) goto begDW4;
blt $t4,$a1,begDW4
endI17:#
#cout << endl;
li $a0, '\n'
li $v0, 11
syscall
#cout << procA2Str;
li $v0, 4
la $a0, procA2Str
syscall
#if (used2 <= 0) goto endI18;
ble $t2,$zero,endI18
begI18:#
#hopPtr2 = a2;
la $t5, a2
#endPtr2 = a2 + used2;
la $a2, a2
sll $a0, $t2, 2
add $a2, $a2, $a0
begDW5:#
#cout << *hopPtr2 << ' ' << ' ';
li $v0, 1
lw $a0, 0($t5)
syscall
li $v0, 11
li $a0, ' '
syscall
syscall
#++hopPtr2;
addi $t5, $t5, 4
endDW5:
DWTest5:# if (hopPtr2 < endPtr2) goto begDW5;
blt $t5,$a2,begDW5
endI18:
#cout << endl;
li $a0, '\n'
li $v0, 11
syscall
#cout << procA3Str;
li $v0, 4
la $a0, procA3Str
syscall
#if (used3 <= 0) goto endI19;
ble $t3,$zero,endI19
begI19:#
#hopPtr3 = a3;
la $t7, a3
#endPtr3 = a3 + used3;
la $a3, a3
sll $a0, $t3 2
add $a3, $a3, $a0
begDW6:#
#cout << *hopPtr3 << ' ' << ' ';
li $v0, 1
lw $a0, 0($t7)
syscall
li $v0, 11
li $a0, ' '
syscall
syscall
#++hopPtr3;
addi $t7, $t7, 4
endDW6:
DWTest6:# if (hopPtr3 < endPtr3) goto begDW6;
blt $t7,$a3,begDW6
endI19:
#cout << endl;
li $v0, 11
li $a0, '\n'
syscall
#cout << dacStr;
li $v0, 4
la $a0, dacStr
syscall
#cin >> oneChar;
li $v0, 12
syscall
move $t8, $v0
endW1:
WTest1:
#if (oneChar == 'n') goto xitW1;
li $v0, 'n'
beq $t8, $v0, xitW1
#if (oneChar != 'N') goto begW1;
li $v0, 'N'
bne $t8, $v0, begW1
xitW1:
#cout << endl;
li $v0, 11
li $a0, '\n'
syscall
#cout << dlStr << '\n';
li $v0, 4
la $a0, dlStr
syscall
li $v0, 11
li $a0, '\n'
syscall
#cout << byeStr << '\n';
li $v0, 4
la $a0, byeStr
syscall
li $v0, 11
li $a0, '\n'
syscall
#cout << dlStr << '\n';
li $v0, 4
la $a0, dlStr
syscall
li $v0, 11
li $a0, '\n'
syscall
#return 0;
li $v0, 10
syscall
#
